# Agent Services Dockerfile with Ubuntu 24.04, Python 3.13.5, and uv
FROM ubuntu:24.04 AS base

ARG PYTHON_VERSION=3.13.5
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

RUN apt-get update && apt-get install -y \
    build-essential \
    software-properties-common \
    libssl-dev \
    libffi-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    curl \
    wget \
    netcat-openbsd \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.13.5
WORKDIR /tmp
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
    && tar xzf Python-${PYTHON_VERSION}.tgz \
    && cd Python-${PYTHON_VERSION} \
    && ./configure --enable-optimizations --enable-shared --with-lto \
    && make -j$(nproc) \
    && make altinstall \
    && ldconfig \
    && cd / \
    && rm -rf /tmp/Python-${PYTHON_VERSION}*

RUN ln -sf /usr/local/bin/python3.13 /usr/local/bin/python3 \
    && ln -sf /usr/local/bin/python3.13 /usr/local/bin/python \
    && ln -sf /usr/local/bin/pip3.13 /usr/local/bin/pip3

# Install uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Builder stage
FROM base AS builder
WORKDIR /app
COPY pyproject.toml requirements.txt ./
RUN uv venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN uv pip install -r requirements.txt

# Production stage
FROM base AS production

RUN groupadd -r agentic && useradd -r -g agentic agentic

COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /app
COPY --chown=agentic:agentic src/ ./src/
COPY --chown=agentic:agentic examples/ ./examples/
COPY --chown=agentic:agentic config/ ./config/
COPY --chown=agentic:agentic pyproject.toml .

RUN mkdir -p /app/logs /app/data /app/uploads && chown -R agentic:agentic /app

# Enhanced agent startup script using cat with EOF
RUN cat > /app/start_agent.sh << 'SCRIPT'
#!/bin/bash
set -e

echo "🤖 Starting agent: $AGENT_TYPE ($AGENT_ID)"
echo "🐍 Python version: $(python3 --version)"

# Wait for dependencies
echo "⏳ Waiting for Redis..."
while ! nc -z redis 6379; do sleep 1; done
echo "✅ Redis is ready"

echo "⏳ Waiting for API Server..."
while ! nc -z api-server 8000; do sleep 1; done
echo "✅ API Server is ready"

# Start the appropriate agent based on AGENT_TYPE
case "$AGENT_TYPE" in
    "file_processor")
        echo "📁 Starting File Processor Agent"
        exec python3 src/agents/file_processor.py
        ;;
    "calculator") 
        echo "🔢 Starting Calculator Agent"
        exec python3 -c "
import asyncio
import sys
import os
sys.path.insert(0, '/app')
from examples.simple_agent import SimpleCalculatorAgent

async def main():
    agent = SimpleCalculatorAgent('$AGENT_ID')
    try:
        await agent.initialize()
        print(f'✅ Calculator agent {agent.agent_id} started')
        while agent._running:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print('🛑 Shutting down calculator agent...')
    finally:
        await agent.shutdown()

asyncio.run(main())
"
        ;;
    "echo")
        echo "📢 Starting Echo Agent"
        exec python3 -c "
import asyncio
import sys
import os
sys.path.insert(0, '/app')
from examples.simple_agent import SimpleEchoAgent

async def main():
    agent = SimpleEchoAgent('$AGENT_ID')
    try:
        await agent.initialize()
        print(f'✅ Echo agent {agent.agent_id} started')
        while agent._running:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print('🛑 Shutting down echo agent...')
    finally:
        await agent.shutdown()

asyncio.run(main())
"
        ;;
    *)
        echo "❌ Unknown agent type: $AGENT_TYPE"
        echo "Available types: file_processor, calculator, echo"
        exit 1
        ;;
esac
SCRIPT

RUN chmod +x /app/start_agent.sh && chown agentic:agentic /app/start_agent.sh

USER agentic

ENV PYTHONPATH=/app

HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD pgrep -f python3 || exit 1

CMD ["/app/start_agent.sh"]
