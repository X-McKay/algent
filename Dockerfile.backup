# Multi-stage build for Agentic System with Ubuntu 24.04 and Python 3.13.5
FROM ubuntu:24.04 as base

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF
ARG PYTHON_VERSION=3.13.5

# Add metadata
LABEL maintainer="agentic-system" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="agentic-system" \
      org.label-schema.description="Scalable Agent-to-Agent communication system with MCP" \
      org.label-schema.version=$VERSION \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.schema-version="1.0"

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    software-properties-common \
    # Python build dependencies
    libssl-dev \
    libffi-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libncurses5-dev \
    libncursesw5-dev \
    liblzma-dev \
    # Network tools
    curl \
    wget \
    netcat-openbsd \
    # Git for version control
    git \
    # Additional utilities
    ca-certificates \
    tzdata \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.13.5 from source (since Ubuntu 24.04 doesn't have 3.13.5 in repos yet)
WORKDIR /tmp
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
    && tar xzf Python-${PYTHON_VERSION}.tgz \
    && cd Python-${PYTHON_VERSION} \
    && ./configure \
        --enable-optimizations \
        --enable-shared \
        --with-lto \
        --with-computed-gotos \
        --with-system-ffi \
    && make -j$(nproc) \
    && make altinstall \
    && ldconfig \
    && cd / \
    && rm -rf /tmp/Python-${PYTHON_VERSION}*

# Create symlinks for python3 and pip3
RUN ln -sf /usr/local/bin/python3.13 /usr/local/bin/python3 \
    && ln -sf /usr/local/bin/python3.13 /usr/local/bin/python \
    && ln -sf /usr/local/bin/pip3.13 /usr/local/bin/pip3 \
    && ln -sf /usr/local/bin/pip3.13 /usr/local/bin/pip

# Install uv for fast dependency management
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Verify installations
RUN python3 --version && \
    pip3 --version && \
    uv --version

# Builder stage
FROM base as builder

WORKDIR /app

# Copy dependency files
COPY pyproject.toml .
COPY requirements.txt .

# Create virtual environment and install dependencies using uv
RUN uv venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install dependencies using uv (much faster than pip)
RUN uv pip install -r requirements.txt

# Production stage
FROM base as production

# Create non-root user
RUN groupadd -r agentic && useradd -r -g agentic agentic

# Copy Python virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=agentic:agentic src/ ./src/
COPY --chown=agentic:agentic examples/ ./examples/
COPY --chown=agentic:agentic config/ ./config/
COPY --chown=agentic:agentic test_quick_wins.py .
COPY --chown=agentic:agentic pyproject.toml .

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R agentic:agentic /app

# Create entrypoint script
RUN echo '#!/bin/bash
set -e

echo "🚀 Starting Agentic System Agent Runner"
echo "🐍 Python version: $(python3 --version)"
echo "📦 UV version: $(uv --version)"

# Wait for dependencies
echo "⏳ Waiting for Redis..."
while ! nc -z redis 6379; do 
    echo "Waiting for Redis..."
    sleep 1
done
echo "✅ Redis is ready"

if [ "$RUN_DEMO_AGENTS" = "true" ]; then
    echo "🤖 Starting demo agents..."
    exec python3 examples/simple_agent.py --mode demo
else
    echo "💤 Agent runner in standby mode"
    # Keep container running
    while true; do sleep 60; done
fi
' > /app/start_runner.sh

RUN chmod +x /app/start_runner.sh && chown agentic:agentic /app/start_runner.sh

# Switch to non-root user
USER agentic

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD pgrep -f python3 || exit 1

# Expose port
EXPOSE 8000

# Start the runner
CMD ["/app/start_runner.sh"]
